////////////////////////////////////////////////////////////////////////////////
/// STRING FUNCTIONS
/// @group string functions
/// @author FÃ¡bio MacÃªdo Mendes
////////////////////////////////////////////////////////////////////////////////
@import 'list';

/// Partition string into separator and return an array of (prefix, sep, postfix).
/// If element is not found on string, return (st, '', ''). In all cases,
/// `$st == str.join(L(str-partition($st)...))`.
///
/// @arg $st - String
/// @arg $sep - Separator
@function str-partition($st, $sep) {
    $idx: str-index($st, $sep);
    @if $idx == null {
        @return ($st, '', '');
    }
    $pre: str-slice($st, 1, $idx - 1);
    $post: str-slice($st, $idx + length($sep));
    @return ($pre, $sep, $post);
}

/// Split string into separator and return a (linked-)list of strings
///
/// @arg $st - Initial string
/// @arg $sep - Separator
@function str-split($st, $sep) {
    $idx: str-index($st, $sep);
    @if $idx == null {
        @return ($st null);
    }
    $pre: str-slice($st, 1, $idx - 1);
    $post: str-slice($st, $idx + length($sep));
    @return ($pre str-split($post, $sep));
}

/// Join all values in a (linked-)list of strings into a single string.
///
/// @arg $xs - Input list
/// @arg $sep - Optional separator
@function str-join($xs, $sep: '') {
    $xs: as-lst($xs);
    $xs: if($sep == '', $xs, lst-intersperse($xs, $sep));
    @return lst-join-by(op-add, '', $xs);
}

/// Replace `$sub` with `$replace` in `$st`
///
/// @arg $st - Initial string
/// @arg $sub - Substring
/// @arg $replace - Replacement (defaults to empty string)
@function str-replace($st, $sub, $replace: '') {
    @return str-join(str-split($st, $sub), $replace);
}

/// Checks if string starts with given sub-string
///
/// @arg $str - input string
/// @arg $prefix - substring prefix
@function str-starts-with($str, $prefix) {
    @return str-slice($str, 1, length($prefix) + 2) == $prefix;
}

/// Checks if string ends with given sub-string
///
/// @arg $str - input string
/// @arg $suffix- substring suffix
@function str-ends-with($str, $suffix) {
    $n: str-length($suffix);
    @if $n > str-length($str) {
        @return false;
    }
    $end: str-slice($str, -$n);
    @return $end == $suffix;
}


