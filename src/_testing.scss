////////////////////////////////////////////////////////////////////////////////
/// TESTING FUNCTIONS
/// @group testing
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////

/// Assert equality on unit tests
///
/// @arg $fst - First argument
/// @arg $snd - Second argument
/// @arg $msg - Optional message
/// @example scss
///     $do: assert-eq(join(hello, world), hello world);
@function assert-eq($fst, $snd, $msg: 'Assertion error') {
    @if $fst != $snd {
        @error '#{$msg}: expect "#{inspect($snd)}", but got "#{inspect($fst)}".';
    }
    @return $fst;
}

/// Assert fn returns true when called with both arguments.
///
/// @arg $fn - Function
/// @arg $fst - First argument
/// @arg $snd - Second argument
/// @arg $msg - Optional message
/// @example scss
///     $do: assert-fn(gt, 2, 3);
@function assert-fn($fn, $fst, $snd, $msg: 'Assertion error') {
    @if not call-fn($fst, $snd) {
        @error '#{$msg}: condition #{$fn} not met with "#{inspect($snd)}" and "#{inspect($fst)}".';
    }
    @return $fst;
}

@function assert-gt($fst, $snd, $msg:'Assertion error') {
    @return assert-fn(gt, $fst, $snd, $msg)
}

@function assert-lt($fst, $snd, $msg:'Assertion error') {
    @return assert-fn(lt, $fst, $snd, $msg)
}

@function assert-ge($fst, $snd, $msg:'Assertion error') {
    @return assert-fn(ge, $fst, $snd, $msg)
}

@function assert-le($fst, $snd, $msg:'Assertion error') {
    @return assert-fn(le, $fst, $snd, $msg)
}

/// Assert approximate numerical equality
///
/// @arg $fst - First argument
/// @arg $snd - Second argument
/// @arg $tol - Maximum tolerance
/// @arg $msg - Optional message
/// @example scss
///     $do: assert-eq(join(hello, world), hello world);
@function assert-simeq($fst, $snd, $tol: 0.000001, $msg: 'Assertion error') {
    @if abs($fst - $snd) > $tol {
        @error '#{$msg}: expect "#{inspect($snd)}", but got "#{inspect($fst)}".';
    }
    @return $fst;
}
