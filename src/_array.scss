////////////////////////////////////////////////////////////////////////////////
/// LIST FUNCTIONS
/// @group array
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////
@import 'functions';

$fn-array-not-given: unique-id() !default;
$fn-empty-array: join((), (), comma) !default;

// BASIC FUNCTIONS -------------------------------------------------------------

/// Return array of a single element.
///
/// @arg $x - Single element of resulting array.
@function singleton($x, $separator: space) {
    @return append((), $x, $separator);
}

/// Return true if $arr contains $value.
///
/// @arg $arr - Input array
/// @arg $value - Value
@function contains($arr, $value) {
    @each $x in $arr {
        @if $x == $value {
            @return true;
        }
    }
    @return false;
}

/// Return an array slice.
///
/// @arg $arr - Input array
/// @arg $start - Starting index
/// @arg $end - Ending index (or null, to slice up to the end)
@function slice($arr, $start, $end: null) {
    // Ugly "performatic" Sass code ;-)
    // Homework: maybe we can keep performance and with an elegant code based
    // on lst-join-by
    $n: length($arr);
    $end: if($end == null, $n, $end);
    $size: $end - $start + 1;

    @if $size <= 32 {
        $result: ();
        @while $size > 8 {
            $result: join($result, (
                nth($arr, $start), nth($arr, $start + 1), nth($arr, $start + 2),
                nth($arr, $start + 3), nth($arr, $start + 4), nth($arr, $start + 5),
                nth($arr, $start + 6), nth($arr, $start + 7)
            ));
            $size: $size - 8;
            $start: $start + 8;
        }
        @for $i from $start through $end {
            $result: append($result, nth($arr, $i));
        }
        @return $result;
    } @else {
        $first-end: $start + floor($size / 2) - 1;
        @return join(
                slice($arr, $start, $first-end),
                slice($arr, $first-end + 1, $end)
        );
    }
}

// CLASSIC FP FUNCTIONS --------------------------------------------------------

/// Apply function to every element of array.
///
/// @arg $fn - A binary operator function
/// @arg $arr - Array
@function map($fn, $arr, $args...) {
    $fn: as-func($fn);
    $ys: $fn-empty-array;
    @each $x in $arr {
        $ys: append($ys, call($fn, $x, $args...));
    }
    @return $ys;
}

/// Keep only elements of array that pass predicate function.
///
/// @arg $fn - A binary operator function
/// @arg $arr - Array
@function filter($fn, $arr, $args...) {
    $fn: as-func($fn);
    $ys: $fn-empty-array;
    @each $x in $arr {
        @if call($fn, $x, $args...) {
            $ys: append($ys, $x);
        }
    }
    @return $ys;
}

/// Reduce array by function
///
/// Arguments are passed in the same order that they appear in the the function
/// signature, i.e., fn($x, $init, ...)
///
/// @arg $fn - A binary operator function
/// @arg $arr - List
/// @arg $init - Initial value of reduction
@function reduce($fn, $arr, $init: $fn-array-not-given, $args...) {
    $fn: as-func($fn);
    $y: $init;
    @each $x in $arr {
        $y: if($y == $fn-array-not-given, $x, call($fn, $x, $y, $args...));
    }
    @if $y == $fn-array-not-given {
        @error "Empty array";
    }
    @return $y;
}

/// Keep only elements of array that pass predicate function.
///
/// @arg $fn - A binary operator function
/// @arg $arr - Array
@function separate($fn, $arr, $args...) {
    $fn: as-func($fn);
    $as: $fn-empty-array;
    $bs: $fn-empty-array;
    @each $x in $arr {
        @if call($fn, $x, $args...) {
            $as: append($as, $x);
        } @else {
            $bs: append($bs, $x);
        }
    }
    @return ($as, $bs);
}

// CHUNKED ITERATION -----------------------------------------------------------
// This will be the basis of a series of optimizations for map, filter, etc.
// Chunked iteration allow us to limit the O(n^2) behavior of those functions
// to a more scalable linear behavior. For small arrays (but how small?),
// quadratic behavior is faster than linear.

/// Convert array to a (linked-)list of array chunks.
///
/// @arg $arr - Array
/// @arg $n - Chunk size
/// @arg $reverse - True to include chunks in reverse order (faster)
@function chunks($arr, $n, $reverse: false) {
    $size-plus-one: length($arr) + 1;
    $chunks: null;
    $end: 1;
    @while $end < $size-plus-one {
        $chunk: $fn-empty-array;
        @if $n == 8 and $size-plus-one >= $end + 8 {
            $chunk: (
                nth($arr, $end),
                nth($arr, $end + 1),
                nth($arr, $end + 2),
                nth($arr, $end + 3),
                nth($arr, $end + 4),
                nth($arr, $end + 5),
                nth($arr, $end + 6),
                nth($arr, $end + 7),
            )
        } @else {
            @for $i from $end to min($end + $n, $size-plus-one) {
                $chunk: append($chunk, nth($arr, $i));
            }
        }
        $chunks: ($chunk $chunks);
        $end: $end + $n;
    }
    @return if($reverse, $chunks, lst-reverse($chunks));
}

/// Join a (linked-) list of chunks created by the chunks function.
///
/// @arg $chunks - List of chunks
/// @arg $reverse - True if chunks are included in reverse order
@function join-chunks($chunks, $reverse: false) {
    @if not $chunks {
        @return $fn-empty-array;
    }

    $a1: nth($chunks, 1);
    $chunks: nth($chunks, 2);
    @if not $chunks {
        @return $a1;
    }

    $a2: nth($chunks, 1);
    $chunks: nth($chunks, 2);
    @if not $chunks {
        @return if($reverse, join($a2, $a1), join($a1, $a2));
    }

    $a3: nth($chunks, 1);
    $chunks: nth($chunks, 2);
    @if not $chunks {
        @return if($reverse, join(join($a3, $a2), $a1), join(join($a1, $a2), $a3));
    }

    $a4: nth($chunks, 1);
    $chunks: nth($chunks, 2);
    $prefix: if($reverse,
        join(join($a4, $a3), join($a2, $a1)),
        join(join($a1, $a2), join($a3, $a4))
    );
    @if not $chunks {
        @return $prefix;
    }
    @return if($reverse,
        join(join-chunks($chunks), $prefix, comma),
        join($prefix, join-chunks($chunks), comma));
}

// CONVERSIONS -----------------------------------------------------------------

/// Convert value to list.
/// Lists are returned as-is, maps become list of 2-tuples and other elements
/// become a list with a single value
///
/// @author - https://hugogiraudel.com/2014/04/28/casting-map-into-list/
/// @arg $value - object to be converted
/// @arg $keep - can be 'keys', 'values' or 'both' (default). It affects conversion of maps.
@function to-array($value, $keep: 'both') {
    $keep: if(index('keys' 'values', $keep), $keep, 'both');

    @if type-of($value) == 'map' {
        $keys: ();
        $values: ();

        @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
        }

        @if $keep == 'keys' {
            @return $keys;
        } @else if $keep == 'values' {
            @return $values;
        } @else {
            @return zip($keys, $values);
        }
    }

    @return if(type-of($value) != 'list', ($value,), $value);
}

