@import 'fn';

//------------------------------------------------------------------------------
// FUNCTIONS
//------------------------------------------------------------------------------

$do: assert-eq(call(as-func(add), 40, 2), 42);

$do: assert-eq(call-fn(add, 40, 2), 42);

$do: assert-eq(pipe(42, negate), -42);
$do: assert-eq(pipe(-4, negate, sqrt), 2);

$do: assert-eq(pipe-2(1, 2, add), 3);

$do: assert-eq(identity(42), 42);
$do: assert-eq(first((42 0)), 42);
$do: assert-eq(second((0 42)), 42);
$do: assert-eq(first-arg(42, 0), 42);
$do: assert-eq(second-arg(0, 42), 42);
$do: assert-eq(gt(42, 32), true);
$do: assert-eq(ge(42, 42), true);
$do: assert-eq(lt(10, 32), true);
$do: assert-eq(le(10, 10), true);
$do: assert-eq(ne(10, 32), true);
$do: assert-eq(eq(42, 42), true);
$do: assert-eq(add(10, 32), 42);
$do: assert-eq(mul(2, 21), 42);
$do: assert-eq(sub(84, 42), 42);
$do: assert-eq(div(84, 2), 42);
$do: assert-eq(not-null(42), true);
$do: assert-eq(negate(42), -42);

//------------------------------------------------------------------------------
// LISTS
//------------------------------------------------------------------------------

// Allocating lists
$do: assert-eq(L(), null);
$do: assert-eq(L(1), (1 null));
$do: assert-eq(L(1, 2, 3), (1 (2 (3 null))));
$do: assert-eq(L(1, 2, 3, 4), (1 (2 (3 (4 null)))));
$do: assert-eq(L(1, 2, 3, 4, 5), (1 (2 (3 (4 (5 null))))));
$do: assert-eq(L(1, 2, 3, 4, 5, 6), (1 (2 (3 (4 (5 (6 null)))))));
$do: assert-eq(L(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1 (2 (3 (4 (5 (6 (7 (8 (9 (10 null)))))))))));

// Basic
$xs: L(1, 2, 3);
$ys: L(3, 2, 1);

$do: assert-eq(car($xs), 1);
$do: assert-eq(cdr($xs), L(2, 3));
$do: assert-eq(cons(0, $xs), L(0, 1, 2, 3));

$do: assert-eq(lst-length($xs), 3);
$do: assert-eq(lst-length(L()), 0);

$do: assert-eq(lst-nth($xs, 2), 2);

$do: assert-eq(lst-index($xs, 2), 2);

$do: assert-eq(lst-contains($xs, 42), false);
$do: assert-eq(lst-contains($xs, 2), true);

// Joining and merging
$do: assert-eq(lst-reverse($xs), $ys);
$do: assert-eq(lst-reverse(L()), L());
$do: assert-eq(lst-reverse(L(a, b)), L(b, a));

$do: assert-eq(lst-zip($xs, $ys), L(1 3, 2 2, 3 1));
$do: assert-eq(lst-zip($xs, L()), L());
$do: assert-eq(lst-zip(L(), $xs), L());
$do: assert-eq(lst-zip(L(1, 2), $xs), L(1 1, 2 2));

$do: assert-eq(lst-stitch($xs, $ys), (3 (2 (1 (3 (2 (1 null)))))));

$do: assert-eq(lst-join($xs, $ys), (1 (2 (3 (3 (2 (1 null)))))));

$do: assert-eq(lst-concat(($xs $ys)), (1 (2 (3 (3 (2 (1 null)))))));

$do: assert-eq(lst-intersperse($xs, 0), L(1, 0, 2, 0, 3));

// Creation
$do: assert-eq(lst-repeat(42, 3), (42 (42 (42 null))));

$do: assert-eq(lst-range(2, 5), (2 (3 (4 (5 null)))));
$do: assert-eq(lst-range(1, 7, 2), (1 (3 (5 (7 null)))));

// Transformations
$long: L(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

$do: assert-eq(lst-map(mul, $xs, 2), (2 (4 (6 null))));

$do: assert-eq(lst-index-map(div, $xs), (1 (1 (1 null))));

$do: assert-eq(lst-filter(gt, $xs, 2), (3 null));

$do: assert-eq(lst-separate(gt, $xs, 2), ((3 null) (1 (2 null))));

$do: assert-eq(lst-drop($xs, 2), (3 null));

$do: assert-eq(lst-take($xs, 2), (1 (2 null)));

$do: assert-eq(lst-sort($ys), $xs);

$do: assert-eq(lst-chunks($xs, 2), ((1 (2 null)) ((3 null) null)));
$do: assert-eq(lst-chunks($long, 2), ((1 (2 null)) ((3 (4 null)) ((5 (6 null)) ((7 (8 null)) ((9 (10 null)) null))))));

$do: assert-eq(lst-pairwise($long), L(1 2, 3 4, 5 6, 7 8, 9 10));
$do: assert-eq(lst-pairwise($long, true), L(9 10, 7 8, 5 6, 3 4, 1 2));
$do: assert-eq(lst-pairwise(cdr($long)), L(2 3, 4 5, 6 7, 8 9, singleton(10)));

// Folds
$do: assert-eq(lst-reduce(rdiv, $xs, 12), 2);

$do: assert-eq(lst-sum($xs), 6);

$do: assert-eq(lst-prod($xs), 6);

$do: assert-eq(lst-all($xs), true);

$do: assert-eq(lst-any($xs), true);

$do: assert-eq(lst-some(gt, $xs, 2), true);

$do: assert-eq(lst-every(gt, $xs, 2), false);

$do: assert-eq(lst-max($xs), 3);

$do: assert-eq(lst-min($xs), 1);

$do: assert-eq(lst-join-by(add, 0, $xs), 6);

// Conversions
$do: assert-eq(lst-from-array(1 2 3), $xs);

$do: assert-eq(lst-from-map((1: 2, 3: 4)), ((1 2) ((3 4) null)));

$do: assert-eq(lst-to-array($xs), (1, 2, 3));

$do: assert-eq(lst-to-map(lst-zip($xs, $ys)), (1: 3, 2: 2, 3: 1));

//------------------------------------------------------------------------------
// NUMERIC FUNCTIONS
//------------------------------------------------------------------------------

$do: assert-eq(pc(50%), 50%);
$do: assert-eq(pc(0.5), 50%);

$do: assert-eq(pow(3, 0), 1);
$do: assert-eq(pow(3, 1), 3);
$do: assert-eq(pow(2, 8), 256);
$do: assert-eq(pow(2, -1), 0.5);
$do: assert-eq(pow(2, -2), 0.25);

$do: assert-simeq(sqrt(2), 1.414213562);
$do: assert-simeq(sqrt(4), 2.0);

$do: assert-eq(exponential-progression(2, 4, 2), L(2, 4, 8, 16));
$do: assert-eq(exponential-progression(0.5, 4, 16), L(16, 8, 4, 2));

$do: assert-eq(sign(42), 1);
$do: assert-eq(sign(-42), -1);
$do: assert-eq(sign(0), 0);

$do: assert-eq(to-number('42'), 42);
$do: assert-eq(to-number('42.1'), 42.1);
$do: assert-eq(to-number('42px'), 42px);

$do: assert-eq(to-length(42, 'px'), 42px);

//------------------------------------------------------------------------------
// ARRAY FUNCTIONS
//------------------------------------------------------------------------------

$arr: (1, 2, 3, 4);
$do: assert-eq(contains($arr, 3), true);

$do: assert-eq(slice($arr, 2), (2 3 4)); // sneaky removal of commas...
$do: assert-eq(slice($arr, 2, 3), (2 3));

$do: assert-eq(reduce(add, $arr), 10);

$do: assert-eq(to-array((1: 2, 3: 4)), (1 2, 3 4));

//------------------------------------------------------------------------------
// MAP FUNCTIONS
//------------------------------------------------------------------------------

$map: ('foo': 'bar', 'ham': 'spam');
$map-1: ('foo': 'bar', 'ham': ('spam': 'eggs', 'answer': 42));
$map-2: ('bar': 'foo', 'ham': ('spam': 'ham'));

$do: assert-eq(map-has-keys($map, (foo, ham)), true);
$do: assert-eq(map-has-keys($map, (foo, ham, baz)), false);

$do: assert-eq(map-path((foo: bar), L(foo)), bar);
$do: assert-eq(map-path((foo: bar), foo), bar);
$do: assert-eq(map-path((foo: (bar: spam)), L(foo)), (bar: spam));
$do: assert-eq(map-path((foo: (bar: (ham: spam))), L(foo, bar, ham)), spam);
$do: assert-eq(map-path((foo: (bar: (ham: spam))), L(foo, bar, eggs), eggs), eggs);

$do: assert-eq(map-get-first($map, (eggs, ham)), spam);
$do: assert-eq(map-get-first($map, (ham, eggs)), spam);
$do: assert-eq(map-get-first($map, (foo, ham)), bar);
$do: assert-eq(map-get-first($map, (ham, foo)), spam);

$do: assert-eq(map-read($map, 'foo', 'eggs'), 'bar');
$do: assert-eq(map-read($map, 'bar', 'eggs'), 'eggs');
$do: assert-eq(map-join(($map, ('eggs': 'baz'))), ('foo': 'bar', 'ham': 'spam', 'eggs': 'baz'));

$do: assert-eq(to-map((1 2, 3 4)), (1: 2, 3: 4));

$do: assert-eq(map-merge-nested(
        ('foo': ('bar': 'baz')),
        ('ham': 'spam', 'foo': ('baz': 'bar'))),
    ('ham': 'spam', 'foo': ('baz': 'bar', 'bar': 'baz')));

$do: assert-eq(map-select($map, L('foo')), ('foo': 'bar'));

$do: assert-eq(map-exclude($map, L('foo')), ('ham': 'spam'));

$do: assert-eq(map-filter-values(ge, (a: 1, b: 2, c: 3), 2), (b: 2, c: 3));

$do: assert-eq(map-apply-values(mul, (a: 1, b: 2, c: 3), 2), (a: 2, b: 4, c: 6));

$do: assert-eq(map-path-merge(L($map-1, $map-2), L('foo')), 'bar');
$do: assert-eq(map-path-merge(L($map-1, $map-2), L('bar')), 'foo');

//------------------------------------------------------------------------------
// STRING FUNCTIONS
//------------------------------------------------------------------------------

$do: assert-eq(str-partition('foo.bar.baz', '.'), ('foo', '.', 'bar.baz'));

$do: assert-eq(str-starts-with('foobar', 'foo'), true);
$do: assert-eq(str-starts-with('foobar', 'bar'), false);

$do: assert-eq(str-ends-with('foobar', 'bar'), true);
$do: assert-eq(str-ends-with('foobar', 'foo'), false);

$do: assert-eq(str-split('foo.bar', '.'), L('foo', 'bar'));
$do: assert-eq(str-split('foo', '.'), L('foo'));

$do: assert-eq(str-join(L('foo', 'bar', 'baz'), '-'), 'foo-bar-baz');

$do: assert-eq(str-replace('foo.bar.baz', '.', '-'), 'foo-bar-baz');

/*
 * ALL TESTS FINISHED SUCCESSFULLY :)
 */
