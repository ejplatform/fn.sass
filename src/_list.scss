////////////////////////////////////////////////////////////////////////////////
/// LINKED LISTS
/// @group list
/// @author Fábio Macêdo Mendes
////////////////////////////////////////////////////////////////////////////////
@import 'functions';

$_fn-list-not-given: unique-id() !default;

// BASIC -----------------------------------------------------------------------

/// Create a list of cons cells from arguments
/// Use as L(1, 2, 3, 4)
@function L($x1: $_fn-list-not-given,
            $x2: $_fn-list-not-given,
            $x3: $_fn-list-not-given,
            $x4: $_fn-list-not-given, $args...) {
    @if $x1 == $_fn-list-not-given {
        @return null;
    } @else if $x2 == $_fn-list-not-given {
        @return ($x1 null);
    } @else if $x3 == $_fn-list-not-given {
        @return ($x1 ($x2 null));
    } @else if $x4 == $_fn-list-not-given {
        @return ($x1 ($x2 ($x3 null)));
    } @else {
        @return ($x1 ($x2 ($x3 ($x4 L($args...)))));
    }
}

/// Returns first element of list
///
/// @arg $xs - List
@function car($xs) {
    @return nth($xs, 1);
}

/// Returns list's tail
///
/// @arg $xs - List
@function cdr($xs) {
    @return nth($xs, 2);
}

/// Construct list, adding first argument $x in front of a list of $xs.
///
/// @arg $x - Element
/// @arg $xs - List
@function cons($x, $xs: null) {
    @return ($x $xs);
}

/// Return list length
///
/// @arg $xs - List
@function lst-length($xs) {
    @return if($xs == null, 0, 1 + lst-length(cdr($xs)));
}

/// Return the n-th element in list of $xs
///
/// @arg $xs - List
/// @arg $n - Requested position
@function lst-nth($xs, $n) {
    @if $xs == null {
        @error "List do not have that many elements."
    }
    @return if($n == 1, car($xs), lst-nth(cdr($xs), $n - 1));
}

/// Return the position of $value in list of $xs.
///
/// @arg $xs - List
/// @arg $value - Lookup value
@function lst-index($xs, $value) {
    $idx: 0;
    @while $xs != null {
        $idx: $idx + 1;
        $x: car($xs);
        $xs: cdr($xs);
        @if $x == $value {
            @return $idx;
        }
    }
    @return null;
}

/// Return true if list of $xs contains $value
///
/// @arg $xs - List
/// @arg $value - Lookup value
@function lst-contains($xs, $value) {
    @return lst-index($xs, $value) != null;
}

/// Cast list object as a linked list.
///
/// @arg $xs - list or list-like object.
@function to-lst($xs) {
    //noinspection CssInvalidFunction
    @if $xs == null {
        @return $xs;
    } @else if type-of($xs) == 'list' {
        @if is-bracketed($xs) or list-separator($xs) == 'comma' {
            @return lst-from-array($xs);
        } @else if length($xs) == 2 {
            @return $xs;
        }
    }
    @error "Input must be a linked list.\nHint: create one from a regular Sass array using L($xs...)"
}

// JOINING AND MERGING LISTS ---------------------------------------------------

/// Reverse order of elements in list
///
/// @arg $xs - List
@function lst-reverse($xs) {
    $xs: to-lst($xs);
    $ys: null;
    @while $xs != null {
        $x: nth($xs, 1);
        $xs: nth($xs, 2);
        $ys: ($x $ys);
    }
    @return $ys;
}

/// Zip two lists together and return a list of conses.
///
/// @arg $xs - List
/// @arg $ys - List
@function lst-zip($xs, $ys) {
    @if $xs != null and $ys != null {
        @return ((car($xs) car($ys)) lst-zip(cdr($xs), cdr($ys)));
    }
    @return null;
}

/// Create a list with reversed $xs followed by $ys.
///
/// @arg $xs - List
/// @arg $ys - List
@function lst-stitch($xs, $ys) {
    @return if($xs == null, $ys, lst-stitch(cdr($xs), (car($xs) $ys)));
}

/// Create a list with $xs followed by $ys.
///
/// @arg $xs - List
/// @arg $ys - List
@function lst-join($xs, $ys) {
    @return lst-stitch(lst-reverse($xs), $ys);
}

/// Append an array of lists together
///
/// @arg $lists - Array of lists
@function lst-concat($lists) {
    $xs: nth($lists, length($lists));
    @for $i from length($lists) - 1 through 1 {
        $xs: lst-join(nth($lists, $i), $xs);
    }
    @return $xs;
}

/// Intersperse $value between elements of $xs
///     lst-intersperse(L(1, 2, 3), 0) ==> L(1, 0, 2, 0, 3)
///
/// @arg $xs - List
/// @arg $value - List
@function lst-intersperse($xs, $value) {
    $xs: to-lst($xs);
    @if $xs == null {
        @return null;
    }
    $x: car($xs);
    $xs: cdr($xs);
    @return if($xs == null, ($x null), ($x ($value lst-intersperse($xs, $value))));
}

// CREATION --------------------------------------------------------------------

/// Create list with $n repetition of $x
///
/// @arg $x - Value
/// @arg $n - Number of repetitions
@function lst-repeat($x, $n: 1) {
    $ys: null;
    @while $n > 0 {
        $ys: ($x $ys);
        $n: $n - 1;
    }
    @return $ys;
}

/// Return a range of numbers from $a to $b (inclusive)
///
/// @arg $a - Starting of range
/// @arg $b - End of range
/// @arg $step (optional) - Step between successive values.
@function lst-range($a, $b, $step: 1) {
    @if $b < $a {
        @return lst-range($b, $a, -$step);
    }

    $ys: null;
    @while $a <= $b {
        $ys: ($a $ys);
        $a: $a + $step;
    }
    @return lst-reverse($ys);
}

// TRANSFORMATIONS -------------------------------------------------------------

/// Create a list of fn($x) for each $x in $xs.
///
/// Any additional arguments are passed to the function during function
/// application.
///
/// @arg $fn - Function name or handle
/// @arg $xs - List
@function lst-map($fn, $xs, $args...) {
    $xs: to-lst($xs);
    $ys: null;
    $fn: as-func($fn);
    @while $xs != null {
        $x: nth($xs, 1);
        $xs: nth($xs, 2);
        $ys: (call($fn, $x, $args...) $ys);
    }
    @return lst-reverse($ys);
}

/// Create a list of fn($position, $x) for each $x in $xs. Position starts
/// counting at 1.
///
/// Any additional arguments are passed to the function during function
/// application.
///
/// @arg $fn - Function name or handle
/// @arg $xs - List
@function lst-index-map($fn, $xs, $args...) {
    $xs: to-lst($xs);
    $ys: null;
    $fn: as-func($fn);
    $idx: 1;
    @while $xs != null {
        $x: nth($xs, 1);
        $xs: nth($xs, 2);
        $ys: (call($fn, $idx, $x, $args...) $ys);
        $idx: $idx + 1;
    }
    @return lst-reverse($ys);
}

/// Filter list by predicate function.
///
/// Any additional arguments are passed to the function during function
/// application.
///
/// @arg $pred - Predicate function (i.e., function that return booleans)
/// @arg $xs - List
@function lst-filter($pred, $xs, $args...) {
    $xs: to-lst($xs);
    $ys: null;
    $pred: as-func($pred);
    @while $xs != null {
        $x: car($xs);
        $xs: cdr($xs);
        @if call($pred, $x, $args...) {
            $ys: ($x $ys);
        }
    }
    @return $ys;
}

/// Return 2 lists, with elements separated by predicate function.
///
/// Any additional arguments are passed to the function during function
/// application.
///
/// @arg $pred - Predicate function (i.e., function that return booleans)
/// @arg $xs - List
@function lst-separate($pred, $xs, $args...) {
    $xs: to-lst($xs);
    $left: null;
    $right: null;
    $pred: as-func($pred);
    @while $xs != null {
        $x: nth($xs, 1);
        $xs: nth($xs, 2);
        @if call($pred, $x, $args...) {
            $left: ($x $left);
        } @else {
            $right: ($x $right);
        }
    }
    @return (lst-reverse($left) lst-reverse($right));
}

/// Drop the first $n elements of list.
///
/// @arg $xs - List
/// @arg $n - Number of elements
@function lst-drop($xs, $n) {
    $xs: to-lst($xs);
    @if $n <= 0 or $xs == null {
        @return $xs;
    }
    @return lst-drop(cdr($xs), $n - 1);
}

/// Keep at most the first n elements of list
///
/// @arg $xs - List
/// @arg $n - Number of elements
@function lst-take($xs, $n) {
    $xs: to-lst($xs);
    @if $n <= 0 or $xs == null {
        @return null;
    }
    @return (car($xs) lst-take(cdr($xs), $n - 1));
}

/// Quick sort algorithm
///
/// @arg $xs - List
@function lst-sort($xs) {
    $xs: to-lst($xs);
    @if $xs == null {
        @return null;
    }
    $x: car($xs);
    $xs: cdr($xs);
    $pair: lst-separate(lt, $xs, $x);
    @return lst-join(lst-sort(car($pair)), ($x lst-sort(cdr($pair))));
}

/// Iterate in chunks of size $n.
///
/// @arg $xs - List
/// @arg $n - Maximum number of elements in each chunk
@function lst-chunks($xs, $n) {
    $xs: to-lst($xs);
    $chunk: null;
    @for $i from 1 through $n {
        @if $xs != null {
            $x: car($xs);
            $xs: cdr($xs);
            $chunk: ($x $chunk);
        }
    }
    @return if($chunk == null, null, (lst-reverse($chunk) lst-chunks($xs, $n)));
}

/// Iterate in chunks of 2.
/// Similar to lst-chunks, but elements are cons cells and it is slightly more
/// efficient.
///
/// @arg $xs - List.
/// @arg $reverse - If true, reverse result.
@function lst-pairwise($xs, $reverse: false) {
    $xs: to-lst($xs);
    $ys: null;
    @while $xs != null {
        $a: car($xs);
        $xs: cdr($xs);
        @if $xs != null {
            $b: car($xs);
            $xs: cdr($xs);
            $ys: (($a $b) $ys);
        } @else {
            $ys: (append((), $a) $ys);
        }
    }
    @return if($reverse, $ys, lst-reverse($ys));
}

// FOLDS -----------------------------------------------------------------------

/// Reduce non-empty list by function $fn.
///
/// Arguments are passed in the same order that they appear in the the function
/// signature, i.e., fn($x, $init, ...)
///
/// @arg $fn - A binary operator function
/// @arg $xs - List
/// @arg $init - Initial value of reduction
@function lst-reduce($fn, $xs, $init: $_fn-list-not-given, $args...) {
    $xs: to-lst($xs);
    @if $init== $_fn-list-not-given {
        @if $xs == null {
            @error "Cannot reduce an empty list";
        } @else {
            $init: car($xs);
            $xs: cdr($xs);
        }
    }
    $fn: as-func($fn);
    @while $xs != null {
        $init: call($fn, car($xs), $init, $args...);
        $xs: cdr($xs);
    }
    @return $init;
}

/// Sum all elements of list.
///
/// @arg $xs - List
@function lst-sum($xs) {
    $xs: to-lst($xs);
    @return lst-reduce(add, $xs, 0);
}

/// Multiply all elements of list.
///
/// @arg $xs - List
@function lst-prod($xs) {
    $xs: to-lst($xs);
    @return lst-reduce(mul, $xs, 1);
}

/// True if all elements are true.
///
/// @arg $xs - List
@function lst-all($xs) {
    $xs: to-lst($xs);
    @if $xs == null {
        @return true;
    }
    @return if(car($xs), lst-all(cdr($xs)), false);
}

/// True if any element is true.
///
/// @arg $xs - List
@function lst-any($xs) {
    $xs: to-lst($xs);
    @if $xs == null {
        @return false;
    }
    @return if(car($xs), true, lst-any(cdr($xs)));
}

/// Return true if some elements pass predicate.
///
/// @arg $pred - Predicate function (i.e., function that return booleans)
/// @arg $xs - List
@function lst-some($pred, $xs, $args...) {
    $xs: to-lst($xs);
    $pred: as-func($pred);
    @while $xs != null {
        $x: car($xs);
        $xs: cdr($xs);
        @if call($pred, $x, $args...) {
            @return true;
        }
    }
    @return false;
}

/// Return true if all elements pass predicate.
///
/// @arg $pred - Predicate function (i.e., function that return booleans)
/// @arg $xs - List
@function lst-every($pred, $xs, $args...) {
    $xs: to-lst($xs);
    $pred: as-func($pred);
    @while $xs != null {
        $x: car($xs);
        $xs: cdr($xs);
        @if not call($pred, $x, $args...) {
            @return false;
        }
    }
    @return true;
}

/// Return maximum value in list
///
/// @arg $xs - List
@function lst-max($xs) {
    $x: car($xs);
    $xs: cdr($xs);
    $y: if($xs == null, $x, lst-max($xs));
    @return if($x > $y, $x, $y);
}

/// Return minimum value in list
///
/// @arg $xs - List
@function lst-min($xs) {
    $x: car($xs);
    $xs: cdr($xs);
    $y: if($xs == null, $x, lst-min($xs));
    @return if($x < $y, $x, $y);
}

/// Generalized join. Reduce list with $fn by applying binary partitions.
///
/// @arg $fn - Binary operator used to join consecutive elements.
/// @arg $empty - Neutral element to $fn (i.e., fn($x, $empty) ==> $x.
/// @arg $xs - List.
@function lst-join-by($fn, $empty, $xs) {
    $xs: to-lst($xs);
    $fn: as-func($fn);
    @if $xs == null {
        @return $empty;
    }
    @while cdr($xs) != null {
        $ys: null;
        $pairs: lst-pairwise($xs, true);
        @while $pairs != null {
            $pair: car($pairs);
            $pairs: cdr($pairs);
            @if length($pair) == 1 {
                $ys: (call($fn, nth($pair, 1), $empty) $ys);
            } @else {
                $ys: (call($fn, nth($pair, 1), nth($pair, 2)) $ys);
            }
        }
        $xs: $ys;
    }
    @return car($xs);
}

// CONVERSIONS -----------------------------------------------------------------

/// Create list from standard lists/array
///
/// @arg $arr - A regular Sass array.
@function lst-from-array($arr) {
    $xs: null;
    @each $x in $arr {
        $xs: ($x $xs);
    }
    @return lst-reverse($xs);
}

/// Create list from map
///
/// @arg $map - A regular Sass map.
@function lst-from-map($map) {
    $xs: null;
    @each $x, $y in $map {
        $xs: (($x $y) $xs);
    }
    @return lst-reverse($xs);
}

/// Convert list of $xs into a Sass array.
///
/// @arg $xs - List
@function lst-to-array($xs) {
    @if $xs == null {
        @return ();
    }

    // Collect partial sub-arrays
    $partials: ();
    @while $xs != null {
        $arr: (nth($xs, 1),);
        $xs: nth($xs, 2);
        @if $xs != null {
            $arr: append($arr, nth($xs, 1));
            $xs: nth($xs, 2);
            @if $xs != null {
                $arr: append($arr, nth($xs, 1));
                $xs: nth($xs, 2);
                @if $xs != null {
                    $arr: append($arr, nth($xs, 1));
                    $xs: nth($xs, 2);
                    @if $xs != null {
                        $arr: append($arr, nth($xs, 1));
                        $xs: nth($xs, 2);
                    }
                }
            }
        }
        $partials: append($partials, $arr);
    }

    // Join partials
    @while length($partials) > 1 {
        $new-partials: ();
        @for $i from 0 to floor(length($partials) / 2) {
            $j: 2 * $i + 1;
            $a: nth($partials, $j);
            $b: nth($partials, $j + 1);
            $new-partials: append($new-partials, join($a, $b));
        }
        $partials: $new-partials;
    }
    @return nth($partials, 1);
}

/// Transform list of pairs into a map
///
/// @arg $xs - List
@function lst-to-map($xs) {
    @if $xs == null {
        @return ();
    }

    // Collect partial sub-arrays
    $partials: ();
    @while $xs != null {
        $item: nth($xs, 1);
        $arr: (nth($item, 1): nth($item, 2));
        $xs: nth($xs, 2);
        @if $xs != null {
            $item: nth($xs, 1);
            $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
            $xs: nth($xs, 2);
            @if $xs != null {
                $item: nth($xs, 1);
                $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                $xs: nth($xs, 2);
                @if $xs != null {
                    $item: nth($xs, 1);
                    $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                    $xs: nth($xs, 2);
                    @if $xs != null {
                        $item: nth($xs, 1);
                        $arr: map-merge($arr, (nth($item, 1): nth($item, 2)));
                        $xs: nth($xs, 2);
                    }
                }
            }
        }
        $partials: append($partials, $arr);
    }

    // Join partials
    @while length($partials) > 1 {
        $new-partials: ();
        @for $i from 0 to floor(length($partials) / 2) {
            $j: 2 * $i + 1;
            $a: nth($partials, $j);
            $b: nth($partials, $j + 1);
            $new-partials: append($new-partials, map-merge($a, $b));
        }
        $partials: $new-partials;
    }
    @return nth($partials, 1);
}

/// Coerce object to list. Lists are returned as is.
///
/// It is more aggressive than to-lst to cast objects to list.
///     * Scalars are converted to single argument lists.
///     * Arrays are converted to lists (except when it causes ambiguity)
@function coerce-to-lst($xs) {
    //noinspection CssInvalidFunction
    @if $xs == null {
        @return null;
    } @else if type-of($xs) == 'list' {
        @if is-bracketed($xs) or list-separator($xs) == 'comma' {
            @return lst-from-array($xs);
        } @else if length($xs) == 2 {
            @return $xs;
        } @else {
            @warn 'Please avoid using spaced-separated lists in places that expect linked-lists';
            @return lst-from-array($xs);
        }
    } @else if type-of($xs) == 'map' {
        @return lst-from-map($xs);
    }
    @return ($xs null);
}
